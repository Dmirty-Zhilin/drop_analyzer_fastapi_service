# --------------------------------------------------------------------------------
# Используем официальный образ Python 3.11 slim на базе Debian Bullseye
# --------------------------------------------------------------------------------
FROM python:3.11-slim-bullseye

# --------------------------------------------------------------------------------
# Отключаем .pyc и буферизацию stdout/stderr
# --------------------------------------------------------------------------------
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# --------------------------------------------------------------------------------
# Устанавливаем рабочую директорию внутри контейнера
# --------------------------------------------------------------------------------
WORKDIR /app

# --------------------------------------------------------------------------------
# Устанавливаем «нативные» (system) зависимости для WeasyPrint и других C-зависимых пакетов
# --------------------------------------------------------------------------------
RUN apt-get update && apt-get install -y --no-install-recommends \
    # 1) GObject/GLib (для libgobject-2.0.so.0):
    libgobject-2.0-0 \
    libglib2.0-0 \
    # 2) Cairo (2D-графика) и его dev-заголовки (нужны, чтобы некоторые компоненты WeasyPrint собирались):
    libcairo2 \
    libcairo2-dev \
    # 3) Pango и его FreeType-подсистема (рендеринг шрифтов):
    libpango-1.0-0 \
    libpangoft2-1.0-0 \
    libpangocairo-1.0-0 \
    # 4) HarfBuzz (шрифт-шейпинг), нужен Pango:
    libharfbuzz0b \
    libharfbuzz-subset0 \
    # 5) GDK-Pixbuf (поддержка растровых изображений, JPEG/PNG):
    libgdk-pixbuf2.0-0 \
    libgdk-pixbuf2.0-dev \
    # 6) JPEG/OpenJPEG (если в requirements есть Pillow или аналогичные):
    libjpeg62-turbo-dev \
    libopenjp2-7-dev \
    # 7) Fontconfig (поиск/менеджмент системных шрифтов):
    libfontconfig1 \
    # 8) libffi-dev & python3-dev & build-essential (сборка CFFI, cryptography, других C-расширений):
    libffi-dev \
    python3-dev \
    build-essential \
    # 9) Если вам нужен PostgreSQL (psycopg2) — раскомментируйте:
    # libpq-dev \
 && rm -rf /var/lib/apt/lists/*

# --------------------------------------------------------------------------------
# Сначала копируем только requirements.txt, чтобы закэшировать установку зависимостей
# --------------------------------------------------------------------------------
COPY requirements.txt /app/requirements.txt

# --------------------------------------------------------------------------------
# Обновляем pip и ставим все Python-зависимости из requirements.txt
# --------------------------------------------------------------------------------
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /app/requirements.txt

# --------------------------------------------------------------------------------
# Копируем весь код вашего FastAPI-приложения
# --------------------------------------------------------------------------------
COPY ./app /app/app

# --------------------------------------------------------------------------------
# Открываем порт 8000 (тот, который вы используете для Uvicorn)
# --------------------------------------------------------------------------------
EXPOSE 8000

# --------------------------------------------------------------------------------
# Запускаем FastAPI через Uvicorn
# --------------------------------------------------------------------------------
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
